#!/bin/bash

#------------------------------------------------------------------------------
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#    https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#------------------------------------------------------------------------------

#------------------------------------------------------------------------------
# Maven Start Up Script for Rocky Linux 9
#
# Required ENV vars:
# JAVA_HOME - location of a JDK home dir
#
# Optional ENV vars
# M2_HOME - location of maven2's installed home dir
# MAVEN_BATCH_ECHO - set to 'on' to enable the echoing of the batch commands
# MAVEN_BATCH_PAUSE - set to 'on' to wait for a keystroke before ending
# MAVEN_OPTS - parameters passed to the Java VM when running Maven
#     e.g. to debug Maven itself, use
#     export MAVEN_OPTS="-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=8000"
# MAVEN_SKIP_RC - flag to disable loading of mavenrc files
#------------------------------------------------------------------------------

# Set error handling
set -e

# Enable echoing by setting MAVEN_BATCH_ECHO to 'on'
if [ "$MAVEN_BATCH_ECHO" = "on" ]; then
    set -x
fi

# Ensure HOME is set
if [ -z "$HOME" ]; then
    export HOME="$(getent passwd $(whoami) | cut -d: -f6)"
fi

# Execute a user defined script before this one
if [ -z "$MAVEN_SKIP_RC" ]; then
    if [ -f "$HOME/.mavenrc_pre" ]; then
        . "$HOME/.mavenrc_pre"
    fi
fi

# Initialize error code
ERROR_CODE=0

# ==== START VALIDATION ====
if [ -n "$JAVA_HOME" ]; then
    if [ -x "$JAVA_HOME/bin/java" ]; then
        : # Java found, continue
    else
        echo "Error: JAVA_HOME is set to an invalid directory." >&2
        echo "JAVA_HOME = \"$JAVA_HOME\"" >&2
        echo "Please set the JAVA_HOME variable in your environment to match the" >&2
        echo "location of your Java installation." >&2
        echo
        exit 1
    fi
else
    echo "Error: JAVA_HOME not found in your environment." >&2
    echo "Please set the JAVA_HOME variable in your environment to match the" >&2
    echo "location of your Java installation." >&2
    echo
    exit 1
fi
# ==== END VALIDATION ====

# Find the project base dir, i.e. the directory that contains the folder ".mvn".
# Fallback to current working directory if not found.
MAVEN_PROJECTBASEDIR="${MAVEN_BASEDIR:-}"
if [ -z "$MAVEN_PROJECTBASEDIR" ]; then
    EXEC_DIR="$(pwd)"
    WDIR="$EXEC_DIR"
    while [ "$WDIR" != "/" ]; do
        if [ -d "$WDIR/.mvn" ]; then
            MAVEN_PROJECTBASEDIR="$WDIR"
            break
        fi
        WDIR="$(dirname "$WDIR")"
    done
    if [ -z "$MAVEN_PROJECTBASEDIR" ]; then
        MAVEN_PROJECTBASEDIR="$EXEC_DIR"
    fi
fi

# Read additional config from .mvn/jvm.config if it exists
if [ -f "$MAVEN_PROJECTBASEDIR/.mvn/jvm.config" ]; then
    JVM_CONFIG_MAVEN_PROPS="$(cat "$MAVEN_PROJECTBASEDIR/.mvn/jvm.config" | tr '\n' ' ')"
fi

MAVEN_JAVA_EXE="$JAVA_HOME/bin/java"
WRAPPER_JAR="$MAVEN_PROJECTBASEDIR/.mvn/wrapper/maven-wrapper.jar"
WRAPPER_LAUNCHER="org.apache.maven.wrapper.MavenWrapperMain"

DOWNLOAD_URL="https://repo.maven.apache.org/maven2/org/apache/maven/wrapper/maven-wrapper/3.2.0/maven-wrapper-3.2.0.jar"

# Read wrapper URL from properties file if it exists
if [ -f "$MAVEN_PROJECTBASEDIR/.mvn/wrapper/maven-wrapper.properties" ]; then
    DOWNLOAD_URL="$(grep '^wrapperUrl=' "$MAVEN_PROJECTBASEDIR/.mvn/wrapper/maven-wrapper.properties" | cut -d'=' -f2-)"
fi

# Extension to allow automatically downloading the maven-wrapper.jar from Maven-central
# This allows using the maven wrapper in projects that prohibit checking in binary data.
if [ -f "$WRAPPER_JAR" ]; then
    if [ "$MVNW_VERBOSE" = "true" ]; then
        echo "Found $WRAPPER_JAR"
    fi
else
    if [ -n "$MVNW_REPOURL" ]; then
        DOWNLOAD_URL="$MVNW_REPOURL/org/apache/maven/wrapper/maven-wrapper/3.2.0/maven-wrapper-3.2.0.jar"
    fi
    if [ "$MVNW_VERBOSE" = "true" ]; then
        echo "Couldn't find $WRAPPER_JAR, downloading it ..."
        echo "Downloading from: $DOWNLOAD_URL"
    fi

    # Create the wrapper directory if it doesn't exist
    mkdir -p "$(dirname "$WRAPPER_JAR")"
    
    # Download the wrapper jar using curl
    if command -v curl >/dev/null 2>&1; then
        if [ -n "$MVNW_USERNAME" ] && [ -n "$MVNW_PASSWORD" ]; then
            curl -u "$MVNW_USERNAME:$MVNW_PASSWORD" -o "$WRAPPER_JAR" "$DOWNLOAD_URL"
        else
            curl -o "$WRAPPER_JAR" "$DOWNLOAD_URL"
        fi
    elif command -v wget >/dev/null 2>&1; then
        if [ -n "$MVNW_USERNAME" ] && [ -n "$MVNW_PASSWORD" ]; then
            wget --user="$MVNW_USERNAME" --password="$MVNW_PASSWORD" -O "$WRAPPER_JAR" "$DOWNLOAD_URL"
        else
            wget -O "$WRAPPER_JAR" "$DOWNLOAD_URL"
        fi
    else
        echo "Error: Neither curl nor wget is available. Please install one of them to download the Maven wrapper." >&2
        exit 1
    fi
    
    if [ "$MVNW_VERBOSE" = "true" ]; then
        echo "Finished downloading $WRAPPER_JAR"
    fi
fi
# End of extension

# Provide a "standardized" way to retrieve the CLI args that will
# work with both Windows and non-Windows executions.\MAVEN_CMD_LINE_ARGS="$@"

# Execute Maven
exec "$MAVEN_JAVA_EXE" \
    $JVM_CONFIG_MAVEN_PROPS \
    $MAVEN_OPTS \
    $MAVEN_DEBUG_OPTS \
    -classpath "$WRAPPER_JAR" \
    "-Dmaven.multiModuleProjectDirectory=$MAVEN_PROJECTBASEDIR" \
    $WRAPPER_LAUNCHER $MAVEN_CMD_LINE_ARGS

# Execute a user defined script after this one
if [ -z "$MAVEN_SKIP_RC" ]; then
    if [ -f "$HOME/.mavenrc_post" ]; then
        . "$HOME/.mavenrc_post"
    fi
fi

# pause the script if MAVEN_BATCH_PAUSE is set to 'on'
if [ "$MAVEN_BATCH_PAUSE" = "on" ]; then
    echo "Press Enter to continue..."
    read
fi

exit $ERROR_CODE